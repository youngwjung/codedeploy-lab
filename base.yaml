AWSTemplateFormatVersion: '2010-09-09'
Description: Base infrastructure for local library application

Resources:
  ## Network
  # Custom VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: ap-northeast-2a
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: ap-northeast-2b
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC

  # Custom Gateways
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
    DependsOn: [VPC, InternetGateway]

  # Route Tables
  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  
  # Routes
  RouteIGW:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    DependsOn: [RouteTablePublic, InternetGateway, VPCGatewayAttachment]

  # Route Table Assocations
  PublicSubnet1RTA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref PublicSubnet1
    DependsOn: [RouteTablePublic, PublicSubnet1]

  PublicSubnet2RTA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref PublicSubnet2
    DependsOn: [RouteTablePublic, PublicSubnet2]

  ## Database 
  #RDS (PostgreSQL)
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: rds-sg 
      VpcId: !Ref VPC

  RDSSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: rds-subnet-group
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  RDS:
    Type: "AWS::RDS::DBInstance"
    Properties:
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: true
      CopyTagsToSnapshot: true
      DBInstanceClass: db.t2.micro
      AllocatedStorage: 20
      StorageType: gp2
      Engine: postgres
      EngineVersion: 12.5
      MasterUsername: postgres
      MasterUserPassword: asdf1234
      DBSubnetGroupName: !Ref RDSSubnetGroup
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      MultiAZ: false
      PubliclyAccessible: true

  ## Application
  # IAM roles assigned to EC2 instnaces
  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - ec2.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM

  # IAM Instance profile assigned to EC2 instnaces
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref IAMRole
    DependsOn: IAMRole

  # Security Group assigned to EC2 instnaces
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: app-sg
      VpcId: !Ref VPC
      
  # Launch Template
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        IamInstanceProfile:
          Name: !Ref InstanceProfile
        ImageId: ami-006e2f9fa7597680a
        InstanceType: t2.micro
        SecurityGroupIds:
          - !Ref InstanceSecurityGroup
        UserData:
          Fn::Base64:
            !Sub |
                #!/bin/bash -xe
                sudo yum install -y httpd httpd-devel postgresql python3 python3-devel gcc
                cd /opt && python3 -m venv venv
                source /opt/venv/bin/activate && pip install mod_wsgi
                sudo systemctl enable httpd
                sudo systemctl start httpd
                sudo yum install -y ruby wget
                wget https://aws-codedeploy-ap-northeast-2.s3.ap-northeast-2.amazonaws.com/latest/install
                chmod +x ./install
                sudo ./install auto
                sudo systemctl enable codedeploy-agent
                sudo systemctl start codedeploy-agent

  # Security Group assigned to ALB
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: alb-sg
      SecurityGroupIngress:
        -
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort : 80
      VpcId: !Ref VPC

  # ALB
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing        
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckProtocol: HTTP
      HealthCheckPath: "/catalog/"
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetGroupAttributes:
        - 
          Key: deregistration_delay.timeout_seconds
          Value: 30

  ALBHTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        -
          TargetGroupArn: !Ref ALBTargetGroup
          Type: forward

  ALBEC2IngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref InstanceSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId: !Ref ALBSecurityGroup

  EC2RDSIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref RDSSecurityGroup
      IpProtocol: tcp
      FromPort: !GetAtt RDS.Endpoint.Port
      ToPort: !GetAtt RDS.Endpoint.Port
      SourceSecurityGroupId: !Ref InstanceSecurityGroup

  # AutoScalingGroup
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 3
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true

Outputs:
  ALBEndpoint:
    Description: ALB DNS name
    Value: !GetAtt ALB.DNSName
  RDSEndpoint:
    Description: RDS DNS name
    Value: !GetAtt RDS.Endpoint.Address
